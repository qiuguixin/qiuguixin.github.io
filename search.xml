<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[5-4 Step 3 购物车设计 Part 2]]></title>
      <url>%2F2017%2F07%2F12%2Fjd-5-4%2F</url>
      <content type="text"><![CDATA[目标 我们的目的是为了每个进店的客户（不管是否有登入，都准备一台购物车）。然后消费者随时可以察看购物车的产品数量。 步骤Step 1 : 显示购物车内物品数量修改 app/views/common/_navbar.html.erb加入 app/views/common/_navbar.html.erb&lt;ul class=&quot;nav navbar-nav navbar-right&quot;&gt;+ &lt;li&gt;+ &lt;%= link_to &quot;#&quot; do %&gt;+ 购物车 &lt;i class=&quot;fa fa-shopping-cart&quot;&gt; &lt;/i&gt; ( &lt;%= current_cart.products.count %&gt; )+ &lt;% end %&gt;+ &lt;/li&gt; &lt;% if !current_user %&gt; Step 2 : 加入购物车代码修改 app/controllers/application_controller.rb app/controllers/application_controller.rbclass ApplicationController &lt; ActionController::Base # ...略+ helper_method :current_cart+ def current_cart+ @current_cart ||= find_cart+ end+ private+ def find_cart+ cart = Cart.find_by(id: session[:cart_id])+ if cart.blank?+ cart = Cart.create+ end+ session[:cart_id] = cart.id+ return cart+ endend Step 3 : 加入 current_cart.add_product_to_cart(@product)修改 app/controllers/products_controller.rb app/controllers/products_controller.rbdef add_to_cart @product = Product.find(params[:id])- redirect_to :back- flash[:notice] = &quot;测试加入购物车&quot;+ current_cart.add_product_to_cart(@product)+ flash[:notice] = &quot;成功加入购物车&quot;+ redirect_to :back end 12git add .git commit -m &quot;implement current_cart function&quot; 结果各位可以按下「加入购物车」的按钮，去看看购物车里的数字从 0 变成 1 。 解说 这部分代码目前对各位来说，是有相当难度的，我们不期待各位读到这一章时，能瞬间理解 不能够理解目前也没关系，只要当作是一段能让购物车「动起来」的代码就行 即便如此，我还是会尽量为各位解释 在 View 里面如何显示购物车内容数量 (helper_method)app/views/common/_navbar.html.erb&lt;li&gt; &lt;%= link_to &quot;#&quot; do %&gt; 购物车 &lt;i class=&quot;fa fa-shopping-cart&quot;&gt; &lt;/i&gt; ( &lt;%= current_cart.products.count %&gt; ) &lt;% end %&gt;&lt;/li&gt; 在 view 里面，我们可以透过 current_cart.products.count 拿到购物车内的物品数量。但是呢 current_cart 其实原本是一个 controller 内的 method，我们为了要在 view 里面要可以存取它。所以，我们得在 applications_controller.rb 宣告他是 helper_method，才能直接存取。 app/controller/applications_controller.rbclass ApplicationController &lt; ActionController::Base # ...略 helper_method :current_cart current_cart 如何运作购物车的构造是这样的： app/controllers/application_controller.rbclass ApplicationController &lt; ActionController::Base # ...略 helper_method :current_cart def current_cart @current_cart ||= find_cart end private def find_cart cart = Cart.find_by(id: session[:cart_id]) if cart.blank? cart = Cart.create end session[:cart_id] = cart.id return cart endend ||= 是什么首先我们来解释 ||= 是什么。 a ||= b 等于 a = a || b。意思是如果 a 是 nil 的话。 a 会被赋予 b 值。见下范例 123a = nilb = 20a ||= b a 会是多少？答案是20 所以 123def current_cart @current_cart ||= find_cartend 意思就是 @current_cart 是 nil 时会呼叫 find_cart 这个函式去判断消费者现在使用的是哪一台车。 find_cart 如何运作12345678def find_cart cart = Cart.find_by(id: session[:cart_id]) if cart.blank? cart = Cart.create end session[:cart_id] = cart.id return cartend 在每个人进店时，都会有一块电子感应卡，叫做 session，所以你的电子感应卡上面记录了你拿了哪台车 cart_id 所以呢，每个人「现在的车」 current_cart 就是透过这样的方式去存取的。 万一你的车丢失了没有关系。if cart.blank? 发现你的车不见了，会再给你一台车。重新登记上去。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>%2F2016%2F11%2F12%2Fhello-world%2F</url>
      <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy this is a new line,lalalalaMore info: Deployment]]></content>
    </entry>

    
  
  
</search>
